// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

import "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/draft-ERC721Votes.sol";

import {Strings} from "@openzeppelin/contracts/utils/Strings.sol";
import {Base64} from "../libraries/Base64.sol";
import "../interfaces/IMintableERC721.sol";
import {MerkleProof} from "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

contract RootActiveMembers is
    ERC721,
    ERC721Enumerable,
    AccessControl,
    EIP712,
    ERC721Votes,
    IMintableERC721
{
    using Counters for Counters.Counter;
    using Base64 for bytes;
    using Strings for uint256;

    // Stuff needed for Polygon mintable assets
    bytes32 public constant PREDICATE_ROLE = keccak256("PREDICATE_ROLE");
    // END

    string public constant NAME = "Active Members Badge";
    string public constant SYMBOL = "AMB";
    string public constant DESCRIPTION =
        "This NFT represents proof that the current owner is an active member of the PretzelDAO. LFB!";

    string public constant SIGNING_DOMAIN_VERSION = "1";

    Counters.Counter private _tokenIdCounter;
    mapping(address => bool) public whitelistClaimed;
    string public imageCID;
    string public animationCID;

    constructor(string memory _imageCID, string memory _animationCID)
        ERC721(NAME, SYMBOL)
        EIP712(NAME, SIGNING_DOMAIN_VERSION)
    {
        imageCID = _imageCID;
        animationCID = _animationCID;

        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _grantRole(PREDICATE_ROLE, _msgSender());
    }

    /**
     * @dev See {IMintableERC721-mint}.
     */
    function mint(address user, uint256 tokenId)
        external
        override
        onlyRole(PREDICATE_ROLE)
    {
        _safeMint(user, tokenId);
        // let's directly delegate the vote to the minter for convenience
        delegate(_msgSender());
    }

    /**
     * @dev See {IMintableERC721-mint}.
     *
     * If you're attempting to bring metadata associated with token
     * from L2 to L1, you must implement this method
     */
    function mint(
        address user,
        uint256 tokenId,
        bytes calldata metaData
    ) external override onlyRole(PREDICATE_ROLE) {
        _safeMint(user, tokenId);
        // the metadata gets generated by the contract so we don't need to do anything here.
        // we just keep this function for compatability
        // setTokenMetadata(tokenId, metaData);

        // let's directly delegate the vote to the minter for convenience
        delegate(_msgSender());
    }

    // we don't need this function! (see above)
    /*
     * If you're attempting to bring metadata associated with token
     * from L2 to L1, you must implement this method, to be invoked
     * when minting token back on L1, during exit
     */
    // function setTokenMetadata(uint256 tokenId, bytes memory data)
    //     internal
    //     virtual
    // {
    //     // This function should decode metadata obtained from L2
    //     // and attempt to set it for this `tokenId`
    //     //
    //     // Following is just a default implementation, feel
    //     // free to define your own encoding/ decoding scheme
    //     // for L2 -> L1 token metadata transfer
    //     string memory uri = abi.decode(data, (string));

    //     _setTokenURI(tokenId, uri);
    // }

    /**
     * @dev See {IMintableERC721-exists}.
     */
    function exists(uint256 tokenId) external view override returns (bool) {
        return _exists(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override
        returns (string memory)
    {
        require(
            _exists(tokenId),
            "ERC721URIStorage: URI query for nonexistent token"
        );
        string memory json = abi
            .encodePacked(
                '{"name": "',
                NAME,
                " #",
                tokenId.toString(),
                '",',
                '"description": "',
                DESCRIPTION,
                '", "image": "ipfs://',
                imageCID,
                '", "animation_url": "ipfs://',
                animationCID,
                '"}'
            )
            .encode(); // this encodes to Base64

        return string(abi.encodePacked("data:application/json;base64,", json));
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal override(ERC721, ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal override(ERC721, ERC721Votes) {
        super._afterTokenTransfer(from, to, tokenId);
    }

    // The following functions are overrides required by Solidity.
    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable, AccessControl)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
